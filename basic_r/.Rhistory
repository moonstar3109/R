mean(x) # 평균
max(x) # 최대값
min(x) # 최소값
median(x)
mean(y)
y <- c(1:10, NA, 11:20) # combine변수의 조합
y
sum(y)
mean(y)
nchar(star)
str1 <- "hello world"
str2 <- "my name is park"
str3 <- c("a", "b". "c", "d", "e")
nchar(star)
str1 <- "hello world"
str2 <- "my name is park"
str3 <- c("a", "b", "c", "d", "e")
nchar(star)
nchar(sta1)
nchar(str1)
# 문자열의 길이 확인
nchar(str1)
nchar(str2)
nchar(str3)
# 문자열 붙이기 함수 paste()
paste(str1,str2)
paste(str1, 10, str2)
paste(str1, str2, sep = ",")
paste(str1, str2, sep = "-")
# collapse는 combine형 변수를 다룰 때 사용하는 옵션
paste(str3, collapse = "," )
str3 <- c("a", "b", "c", "d", "e")
str3
substr(str1, 1, 2) # R에서는 첫번째 값은 1부터 시작(0아님)
substr(str1,5)
substr(str1,6 ,end)
substr(str1, 7, nchar(str1))
# 패키지 설치
install.packages("ggplot2") # 그래프를 그려주는 패키지지
.libPaths()
library(ggplot2)
qplot(x) # 단순한 빈도 그래프프
x <-  c(1,1,1,2,3,4,5)
qplot(x) # 단순한 빈도 그래프프
mpg
# 패키지에는 연습용 데이터가 존재
data(package = .packages(all.available = TRUE))
class(mpg)
mpg <- as.data.frame(mpg)
class(mpg)
# qplot() 단순한 데이터 형태를 확인할 때 사용...
qplot(data = mpg, x = hwy) # 자동차데이터의 고속도로 연비의 빈도
mpg
mpg <- as.data.frame(mpg)
# qplot() 단순한 데이터 형태를 확인할 때 사용...
qplot(data = mpg, x = hwy) # 자동차데이터의 고속도로 연비의 빈도
qplot(data = mpg, x = hwy) # 자동차데이터의 고속도로 연비의 빈도
qplot(data = mpg, x = cty) #
qplot(data = mpg, x = drv, y =cty) # 구동방식 별 도심연비비
qplot(data = mpg, x = drv, y = class) # 구동방식 별 자동차 종류류
qplot(data = mpg, x = drv, y = cty, geom = "line", color = drv)
qplot(data = mpg, x = drv, y = cty, geom = "boxplot", color = drv)
x <- c(80, 54, 75, 34, 90)
x
sum(x)
mean(x)
sum
sum <- sum(x)
avg <- mean(x)
sum
avg
# 외부데이터 불러오기
getwd()
setwd("D:/course/R/basic_r/data")
# 외부데이터 불러오기
getwd()
read.table("excel_exam.txt")
d1 <- read.table("excel_exam.txt")
class(d1)
d1
d1 <- read.table("excel_exam.txt",header = T)
class(d1)
d1
# 데이터가 tap으로 구분된 파일을 읽을 때 사용.
d2 <- read.delim("data/excel_exam.txt", header = T)
d2
# 데이터가 tap으로 구분된 파일을 읽을 때 사용.
d2 <- read.delim("data/excel_exam.txt", header = T)
d2
# 데이터가 tap으로 구분된 파일을 읽을 때 사용.
d2 <- read.delim("data/excel_exam.txt", header = T)
d2
# 데이터가 tap으로 구분된 파일을 읽을 때 사용.
d2 <- read.delim("data/excel_exam.txt", header = T)
# 외부데이터 불러오기
# 작업폴더 확인과 변경
getwd()
setwd("D:/course/R/basic_r/data")
# 데이터가 tap으로 구분된 파일을 읽을 때 사용.
d2 <- read.delim("excel_exam.txt", header = T)
d2
setwd("D:/course/R/basic_r/")
# 외부데이터 불러오기
# 작업폴더 확인과 변경
getwd()
# 데이터가 tap으로 구분된 파일을 읽을 때 사용.
d2 <- read.delim("data/excel_exam.txt", header = T)
d3 <- read.csv("data/excel_exam.csv")
d3
# read.csv() - csv파일을 읽고,
# 문자 데이터를 읽어 들어올때 컬럼이 factor변경되는 문제가 있는데,
# factor로는 변경되는 것을 막는 옵션
d3 <- read.csv("data/excel_exam.csv", stringsAsFactors = F)
d3
class(d1)
str(d3)
# excel파일을 읽기 위해서 패키지 설치
install.packages("readxl")
read_excel("excel_exam.xlsx")
library(readxl)
read_excel("data/excel_exam.xlsx")
d4 <- read_excel("data/excel_exam.xlsx")
d4 <- as.data.frame(d4)
class(d4) #데이터 프레임으로 변경이 필요
d4 <- as.data.frame(d4)
class(d4) #데이터 프레임으로 변경이 필요
d4
library(readxl)
excel_exam <- read_excel("data/excel_exam.xlsx",
sheet = "Sheet1")
View(excel_exam)
data.frame(name,kor,eng)
name <- c("park", "lee", "choi", "hong")
kor <-  c(10, 20, 30, 40, 50)
eng <-  c(23, 45, 64, 34, 23)
data.frame(name,kor,eng)
d5 <- data.frame(name, kor, eng)
d6
name <- c("park", "lee", "choi", "hong")
kor <-  c(10, 20, 30, 40, 50)
eng <-  c(23, 45, 64, 34, 23)
d5
d5
name <- c("park", "lee", "choi", "hong")
kor <-  c(10, 20, 30, 40, 50)
eng <-  c(23, 45, 64, 34, 23)
d5 <- data.frame(name, kor, eng)
d5
name <- c("park","kim", "lee", "choi", "hong")
kor <-  c(10, 20, 30, 40, 50)
eng <-  c(23, 45, 64, 34, 23)
d5 <- data.frame(name, kor, eng)
d5
write.csv(d5, file = "D:\\course\\R\\basic_r\\data\\export.csv") # 절대경로로
write.csv(d5, file = "data/export.csv") # getwd()기준 상대경로
mpg <- as.data.frame(mpg)
mpg
mpg
mpg <- as.data.frame(mpg)
mpg
head(mpg, 20) # 앞부분 20행행
## 데이터프레임 앞부분 확인
head(mpg)
tail(mpg)
tail(mpg,20)
## 테이블 구조로 데이터 화깅ㄴ
View(mpg)
## 데이터 프레임의 구조 확인 str(), dim(), nrow(), ncol()
str(mpg) #구조
dim(mpg) #234행 11열
nrow(mpg) #234행
# 요약 통계 산출 summary()
summary(mpg)
colnames(mpg)
rownames(mpg)
# 여러값으로 구성된 변수 seq()
var5 <- seq(1,10)
var5
class(a)
a <- 3.14
# 숫자형 변수
a <- 1
class(a)
#문자형 변수
b <- "1"
class(b)
c <- c(1:10)
class(c)
# 숫자형 변수
a <- 1
class(a)
#numeric
a <- 3.14
class(a)
class(b)
#character
c <- c(1:10)
class(c)
#범주형 변수
e <- factor(c(1,2,3,2,2,2,1,3,4) )
e
#level      factor:인자
class(e)
levels(e)
f <- factor( c("a","b","b","c"))
f
# 타입변환 함수 as.numeric(), as.charactor(), as.factor()
as.character(a)
as.character(c)
as.factor(c)
# 객체형 데이터 타입
# vector - 한가지 타입으로
c(1,2,3,4,5)
c(1:10)
c(1,2,3, "park","hong") # 문자형으로 저장
# collapse는 combine형 변수를 다룰 때 사용하는 옵션
paste(str3, collapse = "," ) # "a" "b" "c" "d" "e" -> "a,b,c,d,e"
str3 <- c("a", "b", "c", "d", "e")
# collapse는 combine형 변수를 다룰 때 사용하는 옵션
paste(str3, collapse = "," ) # "a" "b" "c" "d" "e" -> "a,b,c,d,e"
x <-  c(1,1,1,2,3,4,5)
qplot(x) # 단순한 빈도 그래프프
library(ggplot2) # 라이브러리 로드
x <-  c(1,1,1,2,3,4,5)
qplot(x) # 단순한 빈도 그래프프
# 데이터 추출
library(ggplot2)
mpg <-  as.data.frame(mpg)
# 데이터 추출
library(ggplot2)
mpg <-  as.data.frame(mpg)
mpg[15, ]
mpg[1:6,]
mpg[3, ] #3행 추출
mpg[1:6,] #1-6행 추출
mpg[c(2,4,6), ] # 2,4,6행 추출
mpg[c(1:6, 8, 10), ]
mpg[15, ]
# 인덱싱을 활용한 데이터 열추출
mpg [,3]
mpg [,7]
mpg[1,7]
mpg[,(1:6)]
mpg[,"model"]
mpg [, c(1:6), 8, 10)] # 1~6, 8, 10열
mpg [, (c(1:6), 8, 10)] # 1~6, 8, 10열
mpg [, c(1:6, 8, 10)] # 1~6, 8, 10열
mpg[,c("model","class")]
# 인덱싱을 활용한 데이터 행열추출
head(mpg)
mpg[1,3]
mpg[1:3,c("model","displ")]
mpg[4:6,c(3:4,5)]
mpg[4:6,c(3:4,6)]
mpg[4:6.c("displ","year","trans")] # 4~6행, 3,4,6열열
mpg[4:6,c("displ","year","trans")] # 4~6행, 3,4,6열열
mpg[1:3,c("model","displ")]
mpg[1,3]
mpg[ 4:6 , c(3:4,6)] # 4~6행, 3,4,6열
mpg[ 4:6 , c("displ","year","trans")] # 4~6행, 3,4,6열열
mpg[1,3]
mpg[1:3, 2:3]
# 주의
# 데이터프레임에서 컬럼이 1개인 경우에는 vector형으로 결과가 나옵니다
mpg[1:3, 1]
class(mpg[1:3, "model"])
#=======================================================================
# 데이터프레임에서 특정행에 대한 결과를 보려면 $ 컬럼명
mpg$manufacturer # mpg[,"manufacturer"]
mpg$model
mpg$year
mpg$class == "suv"
mpg[mpg$model == "a4",]
data.frame(fruit = c("사과", "딸기", "수박"),
price = c(1800, 1500, 1300),
amount = c(24,38,13))
sales <- data.frame(fruit = c("사과", "딸기", "수박"),
price = c(1800, 1500, 1300),
amount = c(24,38,13))
class(sales)
str(sales)
sum(sales$amount)
mean(sales$amount)
#데이터 수정하기기
exam <- read.csv("data/excel_exam.csv", stringsAsFactors = T)
#데이터 수정하기
exam <- read.csv("data/excel_exam.csv", stringsAsFactors = F)
str(exam)
exam
head(exam)
#데이터 수정하기
exam <- read.csv("data/excel_exam.csv", stringsAsFactors = F)
str(exam)
exam[1,] <-  100 # 첫 행 변경
exam[c(1,3,5),] <- 100 # 1,3,5행 변경
#데이터 열 수정하기
exam[,4] <- 50
head(exam)
exam
head(exam)
#데이터 수정하기
exam <- read.csv("data/excel_exam.csv", stringsAsFactors = F)
str(exam)
exam[1,] <-  100 # 첫 행 변경
exam[c(1,3,5),] <- 100 # 1,3,5행 변경
#데이터 열 수정하기
exam[,4] <- 50
exam[,"english"] <- 70
#데이터 부분 수정하기
exam[10,"math"] <- 1000
exam
head(exam)
#데이터 열 추가하기
#열인덱스 or 열이름을 이용해서 추가
exam[,6] <- "hello"
exam
ncol(exam)
exam[,ncol(exam)+1]
exam[,ncol(exam)+1] <- "bye"
#데이터 열 추가하기
#열인덱스 or 열이름을 이용해서 추가
exam[,6] <- "hello"
exam[,ncol(exam)+1] <- "bye"
ncol(exam)
exam
rm.ncol(exam)
colnames(exam)
exam[,"xxx"] <- "abdf"
ncol(exam)
exam
exam$yyy <- "yyy"
exam
c(1:5)[1]
test <- c(1:5)[1]
test[5]
# 컬럼명의 수정 - colnames()
colnames(exam)
# 컬럼명의 수정 - colnames()
colnames(exam)[6] <- "xxx"
exam
colnames(exam)[7] <- "zzz"
exam
head(exam) <- -1
exam
head(exam) <- -1
head(exam) <- exam[-1]
colnames(exam)[-7]
colnames(exam)[-8]
exam
colnames(exam)[-8]
exam
colnames(exam)[,-8]
colnames(exam)[,-7]
colnames(exam)[-7]
exam
colnames(exam)[-9]
head(exam)
exam[-10]
exam[-9]
exam[-8]
head(exam)
head(exam)
# 연속적인 컬럼명 수정, 전체컬럼 수정
colnames(exam)
# 연속적인 컬럼명 수정, 전체컬럼 수정
colnames(exam)[6:9]
# 연속적인 컬럼명 수정, 전체컬럼 수정
colnames(exam)[6:9] <- c("aaa","bbb","ccc","ddd")
head(exam)
colnames(exam) <- c("a","b","c","d","e","f","g","h","i")
head(exam)
#
colnames(exam)["i"] <- "test"
test <- c("aaa","bbb","ccc")
test["aaa"]
test[1]
exam <-  read.csv("data/excel_exam.csv")
exam
exam$total <- exam$math + exam$english + exam$science
#ifelse(exam$avg >= 60, TRUE, FALSE)
exam$pass_fail <- ifelse(exam$avg >= 60, "Y","N")
exam
# ifelse를 이용한 파생변수 생성
exam <-  read.csv("data/excel_exam.csv")
exam
exam$total <- exam$math + exam$english + exam$science
exam$avg <- (exam$math + exam$english + exam$science)/3
#ifelse(exam$avg >= 60, TRUE, FALSE)
exam$pass_fail <- ifelse(exam$avg >= 60, "Y","N")
exam
exam$level <- ifelse(exam$avg >=80,"high", ifelse(exam >=60,"middle",ifelse(exam <= 40,"row" )))
exam
exam$level <- ifelse(exam$avg >=80,"high", ifelse(exam >=60,"middle","row" ))
exam
library(ggplot2)
mpg <- as.data.frame(mpg)
mpg
mpg[1:3,2:4]
mpg[1:3,1:4]
aaa <- mpg[1:3,1:4]
mpg[11:13,1:4]
c <- mpg[1:2,1:5]
ccc
mpg[11:13,1:4]
aaa
bbb
cbind(aaa,bbb) # 컬럼병합
rbing(aaa,bbb) # 행병합
c <- mpg[1:2,1:5]
aaa
ccc
ccc <- mpg[1:2,1:5]
aaa
ccc
ddd <- mpg[11:12,1:4]
aaa
ddd
ddd <- mpg[1:2,1:6]
aaa
ddd
rbind(aaa,ddd)
rbind(aaa,ddd) #에러
# 열 데이터의 빈도수
table(mpg$model)
table(mpg$year)
table(mpg$manufacturer)
table(mpg$manufacturer, mpg$year)
# hist (빈도수)
hist(table(mpg$year))
# hist (빈도수)
hist((mpg$year))
# hist (빈도수)
hist(table(mpg$year))
# hist (빈도수)
hist(table(mpg$model))
hist(table(mpg$manufacturer))
mpg <- as.data.frame(mpg)
mpg
head(mpg)
colnames(mpg)
colnames(mpg)[8] <- "city"
head(npg)
head(mpg)
colnames(mpg)[9] <- "highway"
head(mpg)
colnames(mpg)
mpg$totla <- (mpg$city + mpg$highway)/2
head(mpg)
mpg$totla <- "total"
head(mpg)
colnames(mpg)[12] <- "total"
head(mpg)
library(ggplot2)
mpg <- as.data.frame(mpg)
temp <- as.data.frame(mpg)
colnames(temp)[8] <- "city"
colnames
colnames(temp)[9] <- "highway"
head(temp)
temp$total <- temp$city+temp$highway/2
temp$total <- (temp$city+temp$highway)/2
mean(temp$total)
mpg$test <- ifelse(temp$total >= 24,"A",
ifelse(temp$total >= 20,"B","C"))
head(temp)
mpg$test <- ifelse(temp$total >= 24,"A",
ifelse(temp$total >= 20,"B","C"))
head(temp)
temp$test <- ifelse(temp$total >= 24,"A",
ifelse(temp$total >= 20,"B","C"))
source('D:/course/R/basic_r/code/01basic/script09(문제).R', echo=TRUE)
head(temp)
data(package = .pages(all.available = T))
data(package = .pages(all.available = TRUE))
data(package = .packages(all.available = TRUE))
library(ggplot2)
midwest
?midwest
?hist
mid <- as.data.frame(midwest)
mid
ncol(mid)
colnames(mid)[5] <- "total"
library(ggplot2)
mid <- as.data.frame(midwest)
mid
colnames(mid)[5] <- "total"
head(mid)
colnames(mid)[10] <- "asian"
mid$perasian <- (mid$asian/mid$total)*100
head(mid)
hist(mid/perasian)
mid$perasian <- (mid$asian/mid$total)*100
head(mid)
hist(mid$perasian)
hist(mid$perasian)
mid$perasian <- (mid$asian/mid$total)*100
head(mid)
hist(mid$perasian)
hist(mid(mid$perasian))
hist(table(mid$perasian))
par("mar")
par(mar=c(1,1,1,1))
hist(table(mid$perasian))
hist(table(mid$perasian))
mean(mid$perasian)
test <- mean(mid$perasian)
mid$group <- ifelse(mid$perasian >= test,"large",
"small")
hist(table(mid&group))
mid
table(mid$group)
