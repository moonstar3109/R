geom_bar()
ggplot(mpg, aes(x = hwy, fill = drv)) +
geom_bar() +
coord_polar()
ggplot(mpg, aes(x = factor(hwy), fill = drv)) +
geom_bar() +
coord_polar()
ggplot(mpg, aes(x = hwy, fill = drv)) +
geom_bar() +
coord_polar()
ggplot(mpg, aes(x = factor(hwy), fill = drv)) +
geom_bar() +
coord_polar()
ggplot(mpg, aes(x = factor(hwy), fill = factor(drv))) +
geom_bar() +
coord_polar()
ggplot(mpg, aes(x = drv , fill = model)) +
geom_bar()+
coord_polar(thear = "y")
ggplot(mpg, aes(x = drv , fill = model)) +
geom_bar() +
coord_polar(thear = "y")
ggplot(mpg, aes(x = drv , fill = model)) +
geom_bar() +
coord_polar(theta = "y")
ggplot(mpg, aes(x = drv , fill = model)) +
geom_bar(position = "fill") +
coord_polar(theta = "y")
ggplot(mpg, aes(x = 1, fill = model))+
geom_bar(position = "fill") +
coord_polar(theta = "y")
ggplot(mpg, aes(x = 1, fill = class))+
geom_bar(position = "fill") +
coord_polar(theta = "y")
ggplot(mpg, aes(x = 1, fill = drv))+
geom_bar(position = "fill") +
coord_polar(theta = "y")
1단계
mpg <- as.data.frame(mpg)
ggplot(data = mpg, aes(x = displ, y = hwy)) # 1단계
ggplot(data = mpg, aes(x = displ, y = hwy)) # 1단계
ggplot(data = mpg, aes(x = displ, y = hwy) ) + geom_point() # 2단계계
ggplot(data = mpg, aes(x = displ, y = hwy) ) + geom_point(color = "red", size = 0.1) # 3단계
ggplot(data = mpg, aes(x = displ, y = hwy) ) + geom_point(color = "red", size = 0.1) + xlim(5, 7) # 4단계
# 시각화함수들의 중첩이 길어져서 줄바꿈할때는 +가 마지막에 있도록 처리합니다
# scales를 이용한 축설정
ggplot(data = mpg, aes(x = displ, y = cty) ) +
geom_point() +
xlim(5, 7)+
ylim(10,30)
# drv별 hwy(고속도로)연비 평균
d1 <- mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy, na.rm = T) )
library(ggplot2)
library(dplyr)
mpg <-  as.data.frame(mpg)
# drv별 hwy(고속도로)연비 평균
d1 <- mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy, na.rm = T) )
ggplot(d1, aes( x = drv, y = mean_hwy))+
geom_col()
# reorder는(정렬하고 싶은 변수, 연속형변수)
ggplot(d1, aes(x = reorder(drv, mean_hwy), y = mean_hwy)) +
geom_col()
# 제조사별 hwy평균
d2 <- mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy) )
ggplot(d2, aes( x = reorder(manufacturer, mean_hwy), y = mean_hwy)) +
geom_col()
# 구동방식 별 model
ggplot(mpg, aes(x = drv, fill = model)) +
geom_bar()
# 구동방식 별 연료
ggplot(mpg, aes(x = drv, fill = fl)) +
geom_bar()
# 구동방식 별 model
ggplot(mpg, aes(x = drv, fill = model)) +
geom_bar()
mpg$count
ggplot(mpg, aes(x = 1, fill = drv))+
geom_bar(position = "fill") +
coord_polar(theta = "y")
ggplot(mpg, aes(x = 1, fill = drv))+
geom_bar(position = "fill") +
coord_polar(theta = "y")
ggplot(mpg, aes(x = drv , fill = model)) +
geom_bar(position = "fill") +
coord_polar(theta = "y")
ggplot(mpg, aes(x = factor(hwy), fill = factor(drv))) +
geom_bar() +
coord_polar()
ggplot(mpg, aes(x = drv , fill = model)) +
geom_bar(position = "fill") +
coord_polar(theta = "y")
# 구동방식별 연료
ggplot(mpg, aes(x = drv, fill = fl)) +
geom_bar() +
coord_polar()
# 구동방식별 모델
ggplot(mpg, aes(x = drv, fill = model)) +
geom_bar() +
coord_polar()
# 구동방식 별 연료
ggplot(mpg, aes(x = drv, fill = fl)) +
geom_bar()
ggplot(mpg, aes( x = class , y = drv)) +
geom_bar()
ggplot(mpg, aes( x = class , fill = drv)) +
geom_bar()
ggplot(mpg, aes(x = cty, y = hwy, color = cyl))+
geom_point()
ggplot(mpg, aes( fill = class , x = drv)) +
geom_bar()
# 그래프 회전시키기 coord_flip()
# x축 데이터가 많은 경우 가독성을 위해 사용합니다.
ggplot(mpg, aes(x = model, fill = model))+
geom_bar() +
coord_flip()
# 문제
ggplot(mpg, aes( x = class , fill = drv)) +
geom_bar(position="fill")
# 문제
ggplot(mpg, aes( x = class , fill = drv)) +
geom_bar(position="fill")+
coord_flip()
mpg
test<- mpg %>%
group_by(class)%>%
summarise(mean_cty = mean(cty) ) %>%
arrange( desc(mean_cty) )
ggplot(test, aes(x = class, y = mean_cty, fill = class)) +
geom_col()
ggplot(test, aes(x = class, y = mean_cty, fill = class)) +
geom_col() +
scale_fill_manual(values=my_color)
my_color = c("2seater"="#333300",
"compact"= "#CCCCCC",
"midsize"="#0000CC",
"pickup"="#CC66CC",
"subcompact" = "#660099",
"suv" = "#FF3300")
ggplot(test, aes(x = class, y = mean_cty, fill = class)) +
geom_col() +
scale_fill_manual(values=my_color)
my_color = c("2seater"="#333300",
"compact"= "#CCCCCC",
"midsize"="#0000CC",
"pickup"="#CC66CC",
"subcompact" = "#660099",
"suv" = "#FF3300")
ggplot(test, aes(x = class, y = mean_cty, fill = class)) +
geom_col() +
scale_fill_manual(values=my_color)
my_color <-  c("2seater"="#333300",
"compact"= "#CCCCCC",
"midsize"="#0000CC",
"pickup"="#CC66CC",
"subcompact" = "#660099",
"suv" = "#FF3300")
ggplot(test, aes(x = class, y = mean_cty, fill = class)) +
geom_col() +
scale_fill_manual(values=my_color)
my_color =  c("2seater"="#333300",
"compact"= "#CCCCCC",
"midsize"="#0000CC",
"minivan"="3399CC",
"pickup"="#CC66CC",
"subcompact" = "#660099",
"suv" = "#FF3300")
ggplot(test, aes(x = class, y = mean_cty, fill = class)) +
geom_col() +
scale_fill_manual(values=my_color)
eco <- as.data.frame(economics)
library(ggplot2)
eco <- as.data.frame(economics)
eco
?ecomomics
?economics
ggplot(eco, aes(x=date, y = psavert))+
geom_line()
ggplot(eco, aes(x=date, y = uempmed))+
geom_line()
ggplot(eco, aes(x=date, y = psavert, color= 'red'))+
geom_line()
ggplot(eco, aes(x=date, y = uempmed, color = 'blue'))+
geom_line()
ggplot(eco, aes(x=date, y = uempmed, color = 'green'))+
geom_line()
ggplot(eco, aes(x=date, y = uempmed, color = 'green'))+
geom_line()
ggplot(eco, aes(x=date, y = uempmed ))+
geom_line(color = 'green')
ggplot(eco, aes(x=date, y = psavert))+
geom_line( color= 'red')
ggplot(eco, aes(x=date, y = uempmed ))+
geom_line(color = 'green')
# 일별 연속 날짜 생성
start <- as.Date("1990-01-01")
end <- as.Date("2020-12-01")
seq(start, end, by=1)
date_set1 <- seq(start, end, by=1)
# 월별 연속 날짜 생성
date_set2 <- seq(start,end, by ="month")
date_set2
# 연별 연속 날짜 생성
date_set3 <- seq(start, end , by ="year")
date_set3
# 월별날짜를 이용한 시계열 그래프
date <- seq(as.Date("2000-01-01"), as.Date("2020-12-01"), by = "month")
date
ceiling( runif(10) * 10 )
num <- ceiling( runif(10) * 10 )
data.frame(date, num)
num <- ceiling( runif(length(date)) * 10 )
data.frame(date, num)
# 날짜별 데이터프레임
df <- data.frame(date, num)
ggplot(df, aes(x = date, y = num)) +
geom_line
ggplot(df, aes(x = date, y = num)) +
geom_line()
# 상자그래프
ggplot(mpg, aes(x = drv, y = hwy))+
geom_boxplot()
ggplot(mpg, aes(x = class, y= hwy))+
geom_boxplot()
ggplot(mpg, aes(x = manufacturer, y = hwy))+
geom_boxplot
ggplot(mpg, aes(x = manufacturer, y = hwy))+
geom_boxplot(0)
ggplot(mpg, aes(x = manufacturer, y = hwy))+
geom_boxplot()
ggplot(mpg, aes(x = manufacturer, y = hwy))+
geom_boxplot()+
coord_flip()
ggplot(mpg, aes(x = manufacturer, y = hwy))+
geom_boxplot()
ggplot(mpg, aes(x = manufacturer, y = hwy))+
geom_boxplot()+
coord_flip()
# 그래프의 사용방법이 궁금하다면
?help
library(ggplot2)
mpg <-  as.data.frame(mpg)
library(dplyr)
ggplot(mpg, aes(x = cty, y = hwy))+
geom_point()
# Q2
# 미국 지역별 인구통계 정보를 담은 ggplot2 패키지의 midwest 데이터를 이용합니다
# x 축은 poptotal(전체 인구), y 축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요.
# 전체 인구는 50 만 명 이하, 아시아인 인구는 1 만 명 이하인 지역만 산점도에 표시되게 설정하세요.
midwest <- as.data.frame(midwest)
midwest
ggplot(midwest, aes(x = poptotal, y = popasian))+
geom_point()+
xlim(500000)+
ylim(10000)
ggplot(midwest, aes(x = poptotal, y = popasian))+
geom_point()+
xlim(1,500000)+
ylim(1,10000)
# Q3
# mpg데이터에서 어떤 회사별 suv 차종의 도시 연비가 높은지 확인하려 합니다.
# suv차종을 대상으로 평균 cty(도시 연비)가 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요.
# 막대는 연비 가 높은 순으로 reorder하세요.
mpg
mpg %>%
group_by(manufacturer) %>%
summarise(class == "suv")
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv")
mpg %>%
filter(class == "suv")%>%
group_by(manufacturer) %>%
mpg %>%
filter(class == "suv")%>%
group_by(manufacturer) %>%
mpg %>%
filter(class == "suv")
# Q3
# mpg데이터에서 어떤 회사별 suv 차종의 도시 연비가 높은지 확인하려 합니다.
# suv차종을 대상으로 평균 cty(도시 연비)가 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요.
# 막대는 연비 가 높은 순으로 reorder하세요.
mpg
mpg %>%
filter(class == "suv")
mpg %>%
filter(class == "suv") %>%
group_by(manufacturer)
(manufacturer)
# Q3
# mpg데이터에서 어떤 회사별 suv 차종의 도시 연비가 높은지 확인하려 합니다.
# suv차종을 대상으로 평균 cty(도시 연비)가 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요.
# 막대는 연비 가 높은 순으로 reorder하세요.
mpg
mpg %>%
group_by(manufacturer)
mpg %>%
group_by(manufacturer, class)
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv")
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv")
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(mean_cty = mean(cty) )
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(mean_cty = mean(cty) ) %>%
summarise()
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(mean_cty = mean(cty) ) %>%
arrange(mean_cty)
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(mean_cty = mean(cty) ) %>%
arrange(mean_cty) %>%
summarise(manufacturer)
mpg %>%
group_by(class)
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv")
table(manufacturer)
summarise(manufacturer)
# Q3
# mpg데이터에서 어떤 회사별 suv 차종의 도시 연비가 높은지 확인하려 합니다.
# suv차종을 대상으로 평균 cty(도시 연비)가 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요.
# 막대는 연비 가 높은 순으로 reorder하세요.
mpg
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv")
summarise(manufacturer)
summarise(class)
# Q3
# mpg데이터에서 어떤 회사별 suv 차종의 도시 연비가 높은지 확인하려 합니다.
# suv차종을 대상으로 평균 cty(도시 연비)가 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요.
# 막대는 연비 가 높은 순으로 reorder하세요.
mpg %>%
group_by(class)
# Q3
# mpg데이터에서 어떤 회사별 suv 차종의 도시 연비가 높은지 확인하려 합니다.
# suv차종을 대상으로 평균 cty(도시 연비)가 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요.
# 막대는 연비 가 높은 순으로 reorder하세요.
mpg %>%
group_by(class)
# Q3
# mpg데이터에서 어떤 회사별 suv 차종의 도시 연비가 높은지 확인하려 합니다.
# suv차종을 대상으로 평균 cty(도시 연비)가 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요.
# 막대는 연비 가 높은 순으로 reorder하세요.
mpg %>%
group_by(class) %>%
filter(class == "suv")
# Q3
# mpg데이터에서 어떤 회사별 suv 차종의 도시 연비가 높은지 확인하려 합니다.
# suv차종을 대상으로 평균 cty(도시 연비)가 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요.
# 막대는 연비 가 높은 순으로 reorder하세요.
mpg %>%
group_by(class) %>%
filter(class == "suv") %>%
summarise(manufacturer)
# Q3
# mpg데이터에서 어떤 회사별 suv 차종의 도시 연비가 높은지 확인하려 합니다.
# suv차종을 대상으로 평균 cty(도시 연비)가 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요.
# 막대는 연비 가 높은 순으로 reorder하세요.
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(manufacturer)
# Q3
# mpg데이터에서 어떤 회사별 suv 차종의 도시 연비가 높은지 확인하려 합니다.
# suv차종을 대상으로 평균 cty(도시 연비)가 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요.
# 막대는 연비 가 높은 순으로 reorder하세요.
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
# Q3
# mpg데이터에서 어떤 회사별 suv 차종의 도시 연비가 높은지 확인하려 합니다.
# suv차종을 대상으로 평균 cty(도시 연비)가 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요.
# 막대는 연비 가 높은 순으로 reorder하세요.
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty)) %>%
table(manufacturer)
# Q3
# mpg데이터에서 어떤 회사별 suv 차종의 도시 연비가 높은지 확인하려 합니다.
# suv차종을 대상으로 평균 cty(도시 연비)가 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요.
# 막대는 연비 가 높은 순으로 reorder하세요.
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty)) %>%
# Q3
# mpg데이터에서 어떤 회사별 suv 차종의 도시 연비가 높은지 확인하려 합니다.
# suv차종을 대상으로 평균 cty(도시 연비)가 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요.
# 막대는 연비 가 높은 순으로 reorder하세요.
mpg %>%
filter(class == "suv")
# Q3
# mpg데이터에서 어떤 회사별 suv 차종의 도시 연비가 높은지 확인하려 합니다.
# suv차종을 대상으로 평균 cty(도시 연비)가 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요.
# 막대는 연비 가 높은 순으로 reorder하세요.
mpg
mpg %>%
filter(class == "suv")
mpg %>%
filter(class == "suv") %>%
group_by(manufacturer)
mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty))
mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head(5)
d1 <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head(5)
ggplot(d1, aes(x = manufacturer, y = cty))+
geom_bar()
ggplot(d1, aes(x = manufacturer, y = mean_cty))+
geom_bar()
d1 <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head(5)
ggplot(d1, aes(x = manufacturer, y = mean_cty))+
geom_bar()
ggplot(d1, aes(x = manufacturer, y = mean_cty))
ggplot(d1, aes(x = manufacturer, y = mean_cty)) +
geom_line()
ggplot(d1, aes(x = reorder(manufacturer, mean_cty), y = mean_cty)) +
geom_line()
ggplot(d1, aes(x = reorder(manufacturer, mean_cty), y = mean_cty)) +
geom_col()
ggplot(d1, aes(x = reorder(manufacturer, -mean_cty), y = mean_cty)) +
geom_col()
mpg
mpg %>%
table(class)
mpg %>%
seletc(class)
mpg %>%
select(class)
ggplot(data = mpg, aes(x = class) + geom_bar)
ggplot(data = mpg, aes(x = class) ) + geom_bar()
ggplot(data = mpg, aes(x = reorder(mpg,class) ) + geom_bar()
ggplot(data = mpg, aes(x = reorder(mpg,class)) ) + geom_bar()
ggplot(data = mpg, aes(x = reorder(class)) ) + geom_bar()
ggplot(data = mpg, aes(x = class) ) + geom_bar()
mpg%>%
table(class)
# Q4
# 자동차 중에서 어떤 class(자동차 종류)가 가장 많은지 알아보려고 합니다.
# 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요.
mpg
table(mpg$class)
sort(table(mpg$class))
sort_data <- sort(table(mpg$class))
ggplot(data = sort_data, aes(x = class)) + geom_bar()
ggplot(data = mpg, aes(x = sort_data)) + geom_bar()
sort(table(cut), decreasing=TRUE)
sort(table(cut), decreasing=TRUE)
attach(diamonds)
sort_data <- sort(table(mpg$class))
sort(table(cut), decreasing=TRUE)
barplot(sort(table(cut), decreasing=TRUE)
barplot(sort(table(cut), decreasing=TRUE)
library(ggplot2)
barplot(sort(table(cut), decreasing=TRUE)
barplot(sort(sort_data, decreasing=TRUE)
sort_data <- sort(table(mpg$class))
sort(sort_data, decreasing=TRUE)
barplot(sort(sort_data, decreasing=TRUE)
barplot(sort(sort_data, decreasing=TRUE) + geom_bar()
ggplot(sort(sort_data, decreasing=TRUE) + geom_bar()
ggplot(data = mpg, aes(x = sort(class) ) ) + geom_bar()
ggplot(data = mpg, aes(x = sort(class) ) ) + geom_bar()
ggplot(data = mpg, aes(x = class ) ) + geom_bar()
economics <-  as.Date(economics)
economics <-  as.data.frame(economics)
economics
