audi <- mpg%>%
filter(manufacturer == "audi")%>%
filter(year >= 2000)
sum(audi$cty)
mean(audi$cty)
chev <- mpg%>%
filter(manufacturer == "cheverolet")
ford <- mpg%>%
filter(manufacturer == "ford")
honda <- mpg%>%
filter(manufacturer == "honda")
(chev$hwy + ford$hwy + honda$hwy)/3
(chev$hwy + ford$hwy + honda$hwy)/3
chev <- mpg%>%
filter(manufacturer == "cheverolet")
chev
ford <- mpg%>%
filter(manufacturer == "ford")
ford
honda <- mpg%>%
filter(manufacturer == "honda")
honda
chev_avg <- mean(chev$hwy)
ford_avg <- mean(ford$hwy)
(chev_avg+ford_avg+honda_avg)/3
honda_avg <- mean(honda$hwy)
(chev_avg+ford_avg+honda_avg)/3
chev <- mpg%>%
filter(manufacturer == "cheverolet")
chev_avg <- mean(chev$hwy)
ford <- mpg%>%
filter(manufacturer == "ford")
ford_avg <- mean(ford$hwy)
honda <- mpg%>%
filter(manufacturer == "honda")
honda_avg <- mean(honda$hwy)
(chev_avg+ford_avg+honda_avg)/3
chev_avg <- mean(chev$hwy)
chev_avg
chev <- mpg%>%
filter(manufacturer == "cheverolet")
chev
chev <- mpg%>%
filter(manufacturer == "chevrolet")
chev
chev_avg <- mean(chev$hwy)
chev_avg
ford <- mpg%>%
filter(manufacturer == "ford")
ford_avg <- mean(ford$hwy)
honda <- mpg%>%
filter(manufacturer == "honda")
honda_avg <- mean(honda$hwy)
(chev_avg+ford_avg+honda_avg)/3
round(mean(displ5$hwy))
round(mean(displ4$hwy))
# • Q3. "chevrolet", "ford", "honda" 자동차의 고속도로 연비 평균을 알아보려고 합니다.이회사들의 자동차를 추출한 뒤 hwy 전체 평균을 구해보세요.
str(mpg)
audi <- mpg%>%
filter(manufacturer == "audi" && year >= 2000)
sum(audi$cty)
mean(audi$cty)
audi <- mpg%>%
filter(manufacturer == "audi" && year >= 2000)
sum(audi$cty)
audi <- mpg%>%
filter(manufacturer == "audi" & year >= 2000)
sum(audi$cty)
mean(audi$cty)
mean(x4$hwy)
x4 <- mpg%>%
filter(manufacturer %in% c("chevrolet", "ford", "honda"))
mean(x4$hwy)
library(dplyr)
data = read.csv("data/excel_exam.csv")
select(data, id)
select(data, id, math, english)
# 클래스가 1~3인 행 데이터의 국, 영, 수 컬러만 조회 (파이프라인)
data
data = read.csv("data/excel_exam.csv")
data = read.csv("data/excel_exam.csv")
# 클래스가 1~3인 행 데이터의 국, 영, 수 컬러만 조회 (파이프라인)
data%>%
filter(class >= 1 & class <= 3)
# 클래스가 1~3인 행 데이터의 국, 영, 수 컬러만 조회 (파이프라인)
data%>%
filter(class %in% c(1:3))%>%
select(-id, -class)
# 클래스가 1~3인 행 데이터의 수, 영, 과 컬러만 조회 (파이프라인)
data%>%
filter(class %in% c(1:3))%>%
select(data,-id, -class)
# 클래스가 1~3인 행 데이터의 수, 영, 과 컬러만 조회 (파이프라인)
data%>%
filter(class %in% c(1:3))%>%
select(-id, -class) %>%
head(10)
math
# 클래스가 1~3인 행 데이터의 수, 영, 과 컬러만 조회 (파이프라인)
data%>%
filter(class %in% c(1:3))%>%
select(-id, -class) %>%
head(10)
'''
열 정렬하기 arrange(데이터세트, 열...)
내림차순 정렬을 하고 싶다면 desc(열) 를 이용합니다
'''
arrange(data, math)
arrange(data, desc(math) ) #수학 내림차순순
arrange(data, class, math)
arrange(data, desc(class), id) #수학 올림차순
arrange(data, desc(class), id)
data%>%
filter(class %in% c(1:3))%>%
select(id, math) %>%
arrange(desc(math))
mutate (data, total = math + english + science)
d1 <- mutate (data, total = math + english + science)
d1
# 여러행을 한번에 생성하기
mutate(data, total = math + english + science,
avg = (math+english+science)/3,
test = "hello")
data
# 여러행을 한번에 생성하기
d2 <- mutate(data, total = math + english + science,
avg = (math+english+science)/3,
test = "hello")
d2
# 기존의 열 추출방법
data$test <- data$math+data$english+data$science
data
# 조건에 따른 파생변수 추가
mutate(d2, exam_reuslt = ifelse(avg> 60, "pass","fail"))
# 조건에 따른 파생변수 추가
d3 <- mutate(d2, exam_reuslt = ifelse(avg> 60, "pass","fail"))
d3
# 파이프라인으로 한번에 작성하기(totla, avg, exam_result)변수
data <- rread.csv("data/excel_exam.csv")
data
# 파이프라인으로 한번에 작성하기(totla, avg, exam_result)변수
data <- read.csv("data/excel_exam.csv")
data
data%>%
mutate(total = math + english + science,
avg = (math + english + science)/3)%>%
mutate(exam_result = ifelse(avg >= 60, "pass", "fail"))
result <- data%>%
mutate(total = math + english + science,
avg = (math + english + science)/3)%>%
mutate(exam_result = ifelse(avg >= 60, "pass", "fail"))
result
result <- data%>%
mutate(total = math + english + science,
avg = (math + english + science)/3)%>%
mutate(exam_result = ifelse(avg >= 60, "pass", "fail")) %$>%
filter(exam_result == "pass")
result
result <- data%>%
mutate(total = math + english + science,
avg = (math + english + science)/3)%>%
mutate(exam_result = ifelse(avg >= 60, "pass", "fail")) %$>%
filter(exam_result == "pass")
data
result <- data%>%
mutate(total = math + english + science,
avg = (math + english + science)/3)%>%
mutate(exam_result = ifelse(avg >= 60, "pass", "fail")) %$>%
filter(exam_result == "pass")
result
result <- data%>%
mutate(total = math + english + science,
avg = (math + english + science)/3)%>%
mutate(exam_result = ifelse(avg >= 60, "pass", "fail")) %>%
filter(exam_result == "pass")
result
library(ggplot2)
mpg <- as.data.frame(mpg)
mpg
data <- mpg$class, mpg$cty
data <- c(mpg$class, mpg$cty)
data
select(mpg,class,cty)
data <- select(mpg,class,cty)
data <- mpg%>%
select(class,cry)%>%
filter(class == "suv" & class = "compact")
data <- mpg%>%
select(class,cry)%>%
filter(class == "suv" & class == "compact")
mpg%>%
select(class,cry)%>%
filter(class == "suv" & class == "compact")
mpg%>%
select(class,cty)%>%
filter(class == "suv" & class == "compact")
mpg%>%
select(mpg,class,cty)%>%
filter(class == "suv" & class == "compact")
select(mpg,class,cty)%>%
filter(class == "suv" & class == "compact")
select(mpg, class , cty)
select(mpg, class , cty)%>%
filter(class == "suv")
select(mpg, class , cty)%>%
filter(class == "suv" & class == "compact")
select(mpg, class , cty)%>%
filter(class == "suv" && class == "compact")
filter(class == "suv" | class == "compact"
select(mpg, class , cty)%>%
filter(class == "suv" | class == "compact")
select(mpg,cty)%>%
filter(class == "suv" | class == "compact")
mpg%>%
filter(class == "suv" | class == "compact")%>%
select(mpg,cty)
mpg%>%
filter(class == "suv" | class == "compact")%>%
data <- mpg%>%
filter(class == "suv" | class == "compact")%>%
data <- mpg%>%
filter(class == "suv" | class == "compact")%>%
data
data <- mpg%>%
filter(class == "suv" | class == "compact")
data
select(data,cty)
data <- mpg%>%
filter(class == "suv" | class == "compact")%>%
select(data,cty)
select(mpg%>%
filter(class == "suv" | class == "compact"),cty)
select(mpg%>%
filter(class == "suv" | class == "compact"),cty)
mpg
mpg%>%
select(hwy)
mpg%>%
select(desc(hwy))
mpg%>%
select(mpg,desc(hwy))
select(mpg,hwy)
select(mpg,desc(hwy))
mpg
select(mpg,hwy)
arrange(mpg,hwy)
select(mpg,arrange(mpg,hwy))
arrange(select(mpg, hwy))
mpg%>%
filter(manufacturer == "audi")%>%
data <- mpg%>%
filter(manufacturer == "audi")%>%
data <- mpg%>%
filter(manufacturer == "audi")%>%
data
data <- mpg%>%
filter(manufacturer == "audi")%>%
data
data <- mpg%>%
filter(manufacturer == "audi")
data
data <- mpg%>%
filter(manufacturer == "audi")%>%
select(manufacturer, model, year, hwy)%>%
arrange(select(mpg, hwy))
data <- mpg%>%
filter(manufacturer == "audi")%>%
select(manufacturer, model, year, arrange(select(mpg, hwy)))
data <- mpg%>%
filter(manufacturer == "audi")%>%
select(manufacturer, model, year, arrange(hwy)))
data <- mpg%>%
filter(manufacturer == "audi")%>%
select(manufacturer, model, year, arrange(hwy))
data <- mpg%>%
filter(manufacturer == "audi")%>%
select(manufacturer, model, year, hwy)
daya
data
data <- mpg%>%
filter(manufacturer == "audi")%>%
arrange(select(manufacturer, model, year, hwy))
data <- mpg%>%
filter(manufacturer == "audi")%>%
select(manufacturer, model, year, hwy)
data <- mpg%>%
filter(manufacturer == "audi")%>%
select(manufacturer, model, year, hwy)%>%
arrange(data,hwy)
data
data <- mpg%>%
filter(manufacturer == "audi")%>%
select(manufacturer, model, year, hwy)%>%
arrange(data,hwy)
daya
data
hwy
data <- mpg%>%
filter(manufacturer == "audi")%>%
select(manufacturer, model, year, hwy)%>%
arrange(hwy)
data
data <- mpg%>%
filter(manufacturer == "audi")%>%
select(manufacturer, model, year, hwy)%>%
arrange(hwy)%>%
head(5)
data
# gglplot2에 있는 mpg 데이터는 연비를 나타내는 변수가 hwy(고속도로 연비), cty(도시 연비) 두 종류로 분리되어 있습니
# 다.
# • Q1. mpg 데이터 복사본을 만들고, cty 와 hwy 를 더한 '합산 연비 변수'를 추가.
mpg <- as.data.frame(mpg)
mpg%>%
mutate(ctyhwy = cty+hwy)
# • Q2. 앞에서 만든 '합산 연비 변수'를 2 로 나눠 '평균 연비 변수'를 추가.
mpg%>%
mutate(avg = (cty+hwy)/2)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
arrange(mpg,desc(avg))
q1 <- mpg%>%
mutate(ctyhwy = cty+hwy)
q1 <- mpg%>%
mutate(ctyhwy = cty+hwy,
# • Q2. 앞에서 만든 '합산 연비 변수'를 2 로 나눠 '평균 연비 변수'를 추가.
avg = (cty+hwy)/2)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
q3 <- arrange(q1,desc(avg))
head(q3,5)
mpg%>%
mutate(ctyhwy = cty+hwy,
avg = (cty+hwy)/2)%>%
mutate(range = ifelse(avg >= 35,"high","row"))%>%
mpg%>%
mutate(ctyhwy = cty+hwy,
avg = (cty+hwy)/2)%>%
mutate(range = ifelse(avg >= 35,"high","row"))%>%
arrange(desc(avg))%>%
head(5)
mpg
mpg%>%
mutate(ctyhwy = cty+hwy,
avg = (cty+hwy)/2)
mpg
mpg%>%
mutate(ctyhwy = cty+hwy,
avg = (cty+hwy)/2)
data <- mpg%>%
mutate(ctyhwy = cty+hwy,
avg = (cty+hwy)/2)
# mutate(range = ifelse(avg >= 35,"high","row"))%>%
# arrange(desc(avg))%>%
# head(5)
data
mutate(range = ifelse(avg >= 35,"high","row"))
data <- mpg%>%
mutate(ctyhwy = cty+hwy,
avg = (cty+hwy)/2)%>%
mutate(range = ifelse(avg >= 35,"high","row"))
# arrange(desc(avg))%>%
# head(5)
data
data <- mpg%>%
mutate(ctyhwy = cty+hwy,
avg = (cty+hwy)/2)%>%
mutate(avg = ifelse(avg >= 35,"high","row"))
# arrange(desc(avg))%>%
# head(5)
data
data <- mpg%>%
mutate(ctyhwy = cty+hwy,
avg = (cty+hwy)/2)%>%
mutate(result = ifelse(avg >= 35,"high","row"))
mpg%>%
mutate(ctyhwy = cty+hwy,
avg = (cty+hwy)/2)
# gglplot2에 있는 mpg 데이터는 연비를 나타내는 변수가 hwy(고속도로 연비), cty(도시 연비) 두 종류로 분리되어 있습니
# 다.
# • Q1. mpg 데이터 복사본을 만들고, cty 와 hwy 를 더한 '합산 연비 변수'를 추가.
mpg <- as.data.frame(mpg)
# • Q4. 원본 데이터를 이용해서 1~3 번 문제에 더하여 avg가 35이상이면 high, 35미만이면 row를 추가하는 파이프라인
# 으로 한번에 처리하는 구문을 완성하세요.
mpg
mpg%>%
mutate(ctyhwy = cty+hwy,
avg = (cty+hwy)/2)
arrange(mpg%>%
mutate(ctyhwy = cty+hwy,
avg = (cty+hwy)/2),desc(avg))
mutate(result = ifelse(avg >= 35,"high","row"),desc(avg))
mutate(result = ifelse(avg >= 35,"high","row"), desc(avg))
mutate(result = ifelse(avg >= 35,"high","row")
mutate(result = ifelse(avg >= 35,"high","row")
mutate(result = ifelse(avg >= 35,"high","row")
mutate(result = ifelse(avg >= 35,"high","row")
mpg%>%
mutate(ctyhwy = cty+hwy,
avg = (cty+hwy)/2 )
mutate(result = ifelse(avg >= 35,"high","row")
avg = (cty+hwy)/2 )%>%
avg = (cty+hwy)/2
# • Q4. 원본 데이터를 이용해서 1~3 번 문제에 더하여 avg가 35이상이면 high, 35미만이면 row를 추가하는 파이프라인
# 으로 한번에 처리하는 구문을 완성하세요.
mpg
mpg%>%
avg = (cty+hwy)/2
# • Q4. 원본 데이터를 이용해서 1~3 번 문제에 더하여 avg가 35이상이면 high, 35미만이면 row를 추가하는 파이프라인
# 으로 한번에 처리하는 구문을 완성하세요.
mpg
mpg%>%
mutate(ctyhwy = cty + hwy,
avg = (cty + hwy) / 2)
mpg%>%
mutate(ctyhwy = cty + hwy,
avg = (cty + hwy) / 2)%>%
mutate(result = ifelse(avg >= 35, "high","row"))
mpg%>%
mutate(ctyhwy = cty + hwy,
avg = (cty + hwy) / 2)%>%
mutate(result = ifelse(avg >= 35, "high","row"))%>%
head(5)
arrange(mpg%>%
mutate(ctyhwy = cty + hwy,
avg = (cty + hwy) / 2)%>%
mutate(result = ifelse(avg >= 35, "high","row")),desc(avg))
head(arrange(mpg%>%
mutate(ctyhwy = cty + hwy,
avg = (cty + hwy) / 2)%>%
mutate(result = ifelse(avg >= 35, "high","row")),desc(avg)),5)
data <- read.csv("data/excel_exam.csv")
data
summarise(data,sum_math=sum(math))
summarise( data, sum_math = sum(math), # 합계
avg_math = mean(math), # 평균
count = n() ) # 빈도수
d1 <- summarise( data, sum_math = sum(math), # 합계
avg_math = mean(math), # 평균
count = n() ) # 빈도수
d1
d1
str(d1)
class(d1)
is.data.frame(d1)
is.list(d1)
d2 <-  group_by(data, class)
summarise(d2, math_sum = sum(math))
d2 <-  group_by(data, class)
d2
#클래스별 수학, 영어, 과학의 합계를 요약
summarise(d2, math_sum=sum(math),
eng_sum = sum(english),
sci_sum = sum(science),
total = n() )
summarise(d2, sci_avg = mean(science),
eng_avg = mean(english),
mat_avg = mean(math))
summarise(d2, sci_avg = mean(science),
eng_avg = mean(english),
mat_avg = mean(math),
sci_medi = median(science),
eng_medi = median(english),
mat_medi = median(math))
# 파이프라인으로 한번에 작성
data %>%
group_by(class) %>%
summarise( math_sum = sum(math))
# 파이프라인으로 한번에 작성
data %>%
group_by(class) %>%
summarise( math_sum = sum(math),
math_avg = mean(math))
# 파이프라인으로 한번에 작성
data %>%
group_by(class) %>%
summarise( math_sum = sum(math),
math_avg = mean(math),
total = n(0))
# 파이프라인으로 한번에 작성
data %>%
group_by(class) %>%
summarise( math_sum = sum(math),
math_avg = mean(math),
total = n())
# 파이프라인으로 한번에 작성
data %>%
group_by(class) %>%
summarise( math_sum = sum(math),
math_avg = mean(math),
total = n())
table(mpg$drv)
table(mpg$manufacturer)
table(mpg$drv)
mpg
mpg%>%
group_by(manufacturer,drv)%>%
summarise(mean_cty = mean(cty),
mean_hwy = mean(hwy))
result <- mpg%>%
group_by(manufacturer,drv)%>%
summarise(mean_cty = mean(cty),
mean_hwy = mean(hwy))
result
class(result)
as.data.frame(result)
# 제조사별, 모델의 개수
mpg %>%
group_by(manufacturer,model)%>%
summarise(total = n())
# 제조사별, 모델의 개수
result1 <- mpg %>%
group_by(manufacturer,model)%>%
summarise(total = n())
as.data.frame(result1)
